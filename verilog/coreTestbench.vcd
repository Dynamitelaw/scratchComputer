$date
	Mon Sep  7 00:18:53 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module coreTestbench $end
$var wire 1 ! busy $end
$var reg 1 " clk $end
$var reg 32 # instructionIn [31:0] $end
$var reg 1 $ reset $end
$var reg 1 % start $end
$var integer 32 & programCounter [31:0] $end
$scope module core $end
$var wire 32 ' aOperand_frameIn [31:0] $end
$var wire 32 ( bOperand_frameIn [31:0] $end
$var wire 1 ! busy $end
$var wire 1 " clk $end
$var wire 32 ) instructionIn [31:0] $end
$var wire 1 $ reset $end
$var wire 1 % start $end
$var wire 1 * writeEnable_reg $end
$var wire 1 + writebackState $end
$var wire 1 , writeSlct_we $end
$var wire 5 - writeSelect_frameOut [4:0] $end
$var wire 5 . writeSelect_decodeOut [4:0] $end
$var wire 1 / writeEnable_we $end
$var wire 1 0 writeEnable_frameOut $end
$var wire 1 1 writeEnable_decodeOut $end
$var wire 1 2 unsigned_we $end
$var wire 1 3 unsignedSelect_frameOut $end
$var wire 1 4 unsignedSelect_decodeOut $end
$var wire 1 5 subtractEnable_frameOut $end
$var wire 1 6 subtractEnable_decodeOut $end
$var wire 1 7 subEnable_we $end
$var wire 1 8 setupState $end
$var wire 1 9 result_we $end
$var wire 1 : resultSlct_we $end
$var wire 3 ; resultSelect_frameOut [2:0] $end
$var wire 3 < resultSelect_decodeOut [2:0] $end
$var wire 32 = remOut [31:0] $end
$var wire 32 > readB_regOut [31:0] $end
$var wire 32 ? readA_regOut [31:0] $end
$var wire 32 @ mulOut [31:0] $end
$var wire 32 A lessThanOut [31:0] $end
$var wire 32 B immediateVal_frameOut [31:0] $end
$var wire 32 C immediateVal_decodeOut [31:0] $end
$var wire 1 D immediateSelect_frameOut $end
$var wire 1 E immediateSelect_decodeOut $end
$var wire 1 F imm_we $end
$var wire 1 G immSlct_we $end
$var wire 32 H greaterThanOut [31:0] $end
$var wire 1 I executeState $end
$var wire 1 J error_decodeOut $end
$var wire 32 K equalOut [31:0] $end
$var wire 32 L divideOut [31:0] $end
$var wire 1 M decodeState $end
$var wire 5 N b_location_decodeOut [4:0] $end
$var wire 1 O bOperand_we $end
$var wire 32 P bOperand_frameOut [31:0] $end
$var wire 1 Q bLoc_we $end
$var wire 5 R bLoc_frameOut [4:0] $end
$var wire 32 S adderOut [31:0] $end
$var wire 1 T active $end
$var wire 5 U a_location_decodeOut [4:0] $end
$var wire 1 V aOperand_we $end
$var wire 32 W aOperand_frameOut [31:0] $end
$var wire 1 X aLoc_we $end
$var wire 5 Y aLoc_frameOut [4:0] $end
$var reg 32 Z bOperand_muxOut [31:0] $end
$var reg 32 [ reg_dataIn [31:0] $end
$scope module adder $end
$var wire 1 5 subtract $end
$var wire 32 \ bOperand [31:0] $end
$var wire 32 ] aOperand [31:0] $end
$var reg 32 ^ result [31:0] $end
$scope begin adder_proc $end
$upscope $end
$upscope $end
$scope module comparator $end
$var wire 1 3 unsignedEn $end
$var wire 32 _ bOperand [31:0] $end
$var wire 32 ` aOperand [31:0] $end
$var reg 32 a equal [31:0] $end
$var reg 32 b greater [31:0] $end
$var reg 32 c less [31:0] $end
$scope begin comparator_proc $end
$upscope $end
$upscope $end
$scope module divider $end
$var wire 1 d divFlip $end
$var wire 1 3 unsignedEn $end
$var wire 32 e remResult [31:0] $end
$var wire 32 f divResult [31:0] $end
$var wire 1 g b_isNegative $end
$var wire 32 h bOperand [31:0] $end
$var wire 32 i bOp_abs [31:0] $end
$var wire 1 j a_isNegative $end
$var wire 32 k aOperand [31:0] $end
$var wire 32 l aOp_abs [31:0] $end
$var reg 32 m divuResult [31:0] $end
$var reg 32 n remuResult [31:0] $end
$scope module absoluteValue_A $end
$var wire 1 j isNegative $end
$var wire 1 3 unsignedEn $end
$var wire 32 o result [31:0] $end
$var wire 32 p operand [31:0] $end
$var wire 1 q msb $end
$scope module flipSign $end
$var wire 1 j flip $end
$var wire 32 r operand [31:0] $end
$var wire 32 s flipExtended [31:0] $end
$var reg 32 t result [31:0] $end
$scope begin adder_proc $end
$upscope $end
$upscope $end
$upscope $end
$scope module absoluteValue_B $end
$var wire 1 g isNegative $end
$var wire 1 3 unsignedEn $end
$var wire 32 u result [31:0] $end
$var wire 32 v operand [31:0] $end
$var wire 1 w msb $end
$scope module flipSign $end
$var wire 1 g flip $end
$var wire 32 x operand [31:0] $end
$var wire 32 y flipExtended [31:0] $end
$var reg 32 z result [31:0] $end
$scope begin adder_proc $end
$upscope $end
$upscope $end
$upscope $end
$scope module flipSign_div $end
$var wire 1 d flip $end
$var wire 32 { operand [31:0] $end
$var wire 32 | flipExtended [31:0] $end
$var reg 32 } result [31:0] $end
$scope begin adder_proc $end
$upscope $end
$upscope $end
$scope module flipSign_rem $end
$var wire 1 j flip $end
$var wire 32 ~ operand [31:0] $end
$var wire 32 !" flipExtended [31:0] $end
$var reg 32 "" result [31:0] $end
$scope begin adder_proc $end
$upscope $end
$upscope $end
$scope begin divider_proc $end
$upscope $end
$upscope $end
$scope module frameWriteController $end
$var wire 1 X aLoc_we $end
$var wire 1 V aOperand_we $end
$var wire 1 Q bLoc_we $end
$var wire 1 O bOperand_we $end
$var wire 1 G immSlct_we $end
$var wire 1 F imm_we $end
$var wire 1 : resultSlct_we $end
$var wire 1 9 result_we $end
$var wire 1 7 subEnable_we $end
$var wire 1 2 unsigned_we $end
$var wire 1 / writeEnable_we $end
$var wire 1 , writeSlct_we $end
$var wire 1 + writebackState $end
$var wire 1 8 setupState $end
$var wire 1 I executeState $end
$var wire 1 M decodeState $end
$upscope $end
$scope module instructionDecoder $end
$var wire 32 #" instructionIn [31:0] $end
$var wire 5 $" rs2 [4:0] $end
$var wire 5 %" rs1 [4:0] $end
$var wire 5 &" rd [4:0] $end
$var wire 7 '" opcode [6:0] $end
$var wire 12 (" imm [11:0] $end
$var wire 7 )" funct7 [6:0] $end
$var wire 3 *" funct3 [2:0] $end
$var reg 5 +" a_location [4:0] $end
$var reg 1 ," add_flag $end
$var reg 1 -" addi_flag $end
$var reg 5 ." b_location [4:0] $end
$var reg 1 /" div_flag $end
$var reg 1 0" divu_flag $end
$var reg 8 1" encoderInput [7:0] $end
$var reg 1 J error $end
$var reg 1 E immediateSelect $end
$var reg 32 2" immediateVal [31:0] $end
$var reg 1 3" mul_flag $end
$var reg 1 4" rem_flag $end
$var reg 1 5" remu_flag $end
$var reg 3 6" resultSelect [2:0] $end
$var reg 1 7" slt_flag $end
$var reg 1 8" slti_flag $end
$var reg 1 9" sltiu_flag $end
$var reg 1 :" sltu_flag $end
$var reg 1 ;" sub_flag $end
$var reg 1 6 subtractEnable $end
$var reg 1 4 unsignedSelect $end
$var reg 1 1 writeEnable $end
$var reg 5 <" writeSelect [4:0] $end
$scope begin instructionDecode $end
$upscope $end
$upscope $end
$scope module instructionFrame $end
$var wire 5 =" aLoc_in [4:0] $end
$var wire 1 X aLoc_we $end
$var wire 32 >" aOperand_in [31:0] $end
$var wire 1 V aOperand_we $end
$var wire 5 ?" bLoc_in [4:0] $end
$var wire 1 Q bLoc_we $end
$var wire 32 @" bOperand_in [31:0] $end
$var wire 1 O bOperand_we $end
$var wire 1 " clk $end
$var wire 1 G immSlct_we $end
$var wire 1 F imm_we $end
$var wire 1 E immediateSelect_in $end
$var wire 32 A" immediateVal_in [31:0] $end
$var wire 1 $ reset $end
$var wire 3 B" resultSelect_in [2:0] $end
$var wire 1 : resultSlct_we $end
$var wire 1 7 subEnable_we $end
$var wire 1 6 subtractEnable_in $end
$var wire 1 4 unsignedSelect_in $end
$var wire 1 2 unsigned_we $end
$var wire 1 1 writeEnable_in $end
$var wire 1 / writeEnable_we $end
$var wire 5 C" writeSelect_in [4:0] $end
$var wire 1 , writeSlct_we $end
$var reg 5 D" aLoc_out [4:0] $end
$var reg 32 E" aOperand_out [31:0] $end
$var reg 5 F" bLoc_out [4:0] $end
$var reg 32 G" bOperand_out [31:0] $end
$var reg 1 D immediateSelect_out $end
$var reg 32 H" immediateVal_out [31:0] $end
$var reg 3 I" resultSelect_out [2:0] $end
$var reg 1 5 subtractEnable_out $end
$var reg 1 3 unsignedSelect_out $end
$var reg 1 0 writeEnable_out $end
$var reg 5 J" writeSelect_out [4:0] $end
$scope begin instructionFrame_proc $end
$upscope $end
$upscope $end
$scope module multipler $end
$var wire 32 K" aOperand [31:0] $end
$var wire 32 L" bOperand [31:0] $end
$var reg 32 M" result [31:0] $end
$scope begin mul_proc $end
$upscope $end
$upscope $end
$scope module pipelineStateController $end
$var wire 1 " clk $end
$var wire 1 N" nextActiveState $end
$var wire 1 O" notActive $end
$var wire 1 $ reset $end
$var wire 1 P" sleepState $end
$var wire 1 % start $end
$var wire 1 + writebackState $end
$var wire 1 8 setupState $end
$var wire 1 I executeState $end
$var wire 1 M decodeState $end
$var reg 1 T active $end
$var reg 2 Q" pipelineState [1:0] $end
$var reg 4 R" stateDecoderOutput [3:0] $end
$scope begin stateControl $end
$upscope $end
$scope begin stateDecoder_proc $end
$upscope $end
$upscope $end
$scope module registers $end
$var wire 32 S" a0 [31:0] $end
$var wire 32 T" a1 [31:0] $end
$var wire 32 U" a2 [31:0] $end
$var wire 32 V" a3 [31:0] $end
$var wire 32 W" a4 [31:0] $end
$var wire 32 X" a5 [31:0] $end
$var wire 32 Y" a6 [31:0] $end
$var wire 32 Z" a7 [31:0] $end
$var wire 1 " clk $end
$var wire 32 [" dataIn [31:0] $end
$var wire 32 \" fp [31:0] $end
$var wire 32 ]" gp [31:0] $end
$var wire 32 ^" r0 [31:0] $end
$var wire 32 _" ra [31:0] $end
$var wire 5 `" readA_select [4:0] $end
$var wire 5 a" readB_select [4:0] $end
$var wire 1 $ reset $end
$var wire 32 b" s0 [31:0] $end
$var wire 32 c" s1 [31:0] $end
$var wire 32 d" s10 [31:0] $end
$var wire 32 e" s11 [31:0] $end
$var wire 32 f" s2 [31:0] $end
$var wire 32 g" s3 [31:0] $end
$var wire 32 h" s4 [31:0] $end
$var wire 32 i" s5 [31:0] $end
$var wire 32 j" s6 [31:0] $end
$var wire 32 k" s7 [31:0] $end
$var wire 32 l" s8 [31:0] $end
$var wire 32 m" s9 [31:0] $end
$var wire 32 n" sp [31:0] $end
$var wire 32 o" t0 [31:0] $end
$var wire 32 p" t1 [31:0] $end
$var wire 32 q" t2 [31:0] $end
$var wire 32 r" t3 [31:0] $end
$var wire 32 s" t4 [31:0] $end
$var wire 32 t" t5 [31:0] $end
$var wire 32 u" t6 [31:0] $end
$var wire 32 v" tp [31:0] $end
$var wire 1 * writeEnable $end
$var wire 5 w" writeSelect [4:0] $end
$var reg 32 x" r1 [31:0] $end
$var reg 32 y" r10 [31:0] $end
$var reg 32 z" r11 [31:0] $end
$var reg 32 {" r12 [31:0] $end
$var reg 32 |" r13 [31:0] $end
$var reg 32 }" r14 [31:0] $end
$var reg 32 ~" r15 [31:0] $end
$var reg 32 !# r16 [31:0] $end
$var reg 32 "# r17 [31:0] $end
$var reg 32 ## r18 [31:0] $end
$var reg 32 $# r19 [31:0] $end
$var reg 32 %# r2 [31:0] $end
$var reg 32 &# r20 [31:0] $end
$var reg 32 '# r21 [31:0] $end
$var reg 32 (# r22 [31:0] $end
$var reg 32 )# r23 [31:0] $end
$var reg 32 *# r24 [31:0] $end
$var reg 32 +# r25 [31:0] $end
$var reg 32 ,# r26 [31:0] $end
$var reg 32 -# r27 [31:0] $end
$var reg 32 .# r28 [31:0] $end
$var reg 32 /# r29 [31:0] $end
$var reg 32 0# r3 [31:0] $end
$var reg 32 1# r30 [31:0] $end
$var reg 32 2# r31 [31:0] $end
$var reg 32 3# r4 [31:0] $end
$var reg 32 4# r5 [31:0] $end
$var reg 32 5# r6 [31:0] $end
$var reg 32 6# r7 [31:0] $end
$var reg 32 7# r8 [31:0] $end
$var reg 32 8# r9 [31:0] $end
$var reg 32 9# readA_out [31:0] $end
$var reg 32 :# readB_out [31:0] $end
$scope begin outputMux_proc $end
$upscope $end
$scope begin registerWrite_proc $end
$upscope $end
$upscope $end
$scope begin bOperandMux_proc $end
$upscope $end
$scope begin resultSelect_proc $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b1 R"
b0 Q"
1P"
1O"
1N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b101 C"
b0 B"
b10010 A"
b0 @"
b10010 ?"
b0 >"
b0 ="
b101 <"
0;"
0:"
09"
08"
07"
b0 6"
05"
04"
03"
b10010 2"
b1 1"
00"
0/"
b10010 ."
1-"
0,"
b0 +"
b0 *"
b0 )"
b10010 ("
b10011 '"
b101 &"
b0 %"
b10010 $"
b1001000000000001010010011 #"
bx ""
b0 !"
bx ~
bx }
b0 |
bx {
b0 z
b0 y
b0 x
0w
b0 v
b0 u
b0 t
b0 s
b0 r
0q
b0 p
b0 o
bx n
bx m
b0 l
b0 k
0j
b0 i
b0 h
0g
bx f
bx e
0d
b0 c
b0 b
b1 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
1X
b0 W
0V
b0 U
0T
b0 S
b0 R
1Q
b0 P
0O
b10010 N
1M
bx L
b1 K
xJ
0I
b0 H
1G
1F
1E
0D
b10010 C
b0 B
b0 A
b0 @
b0 ?
b0 >
bx =
b0 <
b0 ;
1:
09
08
17
06
05
04
03
12
11
00
1/
b101 .
b0 -
1,
0+
0*
b1001000000000001010010011 )
b0 (
b0 '
b0 &
1%
1$
b1001000000000001010010011 #
1"
0!
$end
#1
0"
#2
1"
#3
0"
0$
#4
0P"
b10010 (
b10010 @"
b10010 Z
0O"
0%
10
b101 -
b101 J"
b101 w"
1D
b10010 B
b10010 H"
b10010 R
b10010 F"
b10010 a"
1!
1T
1"
#5
0"
#6
0/
0,
0:
07
02
0G
0F
0Q
0X
0M
1O
1V
18
b10 R"
b1 Q"
1"
#7
0"
#8
1*
19
0O
0V
08
1I
b100 R"
b0 =
b0 e
b0 ""
b0 L
b0 f
b0 }
b10010 [
b10010 ["
b0 n
b0 ~
b0 m
b0 {
b10010 S
b10010 ^
b1 A
b1 c
b0 K
b0 a
b10010 i
b10010 u
b10010 z
b10010 P
b10010 \
b10010 _
b10010 h
b10010 v
b10010 x
b10010 G"
b10010 L"
b10 Q"
1"
#9
0"
#10
0N"
0I
1+
b1000 R"
b10010 o"
b10010 4#
b11 Q"
1"
#11
0"
#12
1N"
0*
1P"
09
1/
1,
1:
17
12
1G
1F
1Q
1X
1M
0+
b1 R"
1O"
1%
b0 Q"
0!
0T
1"
#13
b110 .
b110 <"
b110 C"
b11000 C
b11000 2"
b11000 A"
b11000 N
b11000 ."
b11000 ?"
b110 &"
b11000 $"
b11000 ("
b1100000000000001100010011 #
b1100000000000001100010011 )
b1100000000000001100010011 #"
0"
b1 &
#14
0P"
b11000 (
b11000 @"
b11000 Z
0O"
0%
b110 -
b110 J"
b110 w"
b11000 B
b11000 H"
b11000 R
b11000 F"
b11000 a"
1!
1T
1"
#15
0"
#16
0/
0,
0:
07
02
0G
0F
0Q
0X
0M
1O
1V
18
b10 R"
b1 Q"
1"
#17
0"
#18
1*
19
0O
0V
08
1I
b100 R"
b11000 [
b11000 ["
b11000 S
b11000 ^
b11000 i
b11000 u
b11000 z
b11000 P
b11000 \
b11000 _
b11000 h
b11000 v
b11000 x
b11000 G"
b11000 L"
b10 Q"
1"
#19
0"
#20
0N"
0I
1+
b1000 R"
b11000 p"
b11000 5#
b11 Q"
1"
#21
0"
#22
1N"
0*
1P"
09
1/
1,
1:
17
12
1G
1F
1Q
1X
1M
0+
b1 R"
1O"
1%
b0 Q"
0!
0T
1"
#23
b11100 .
b11100 <"
b11100 C"
b101 C
b101 2"
b101 A"
0E
b101 N
b101 ."
b101 ?"
b110 U
b110 +"
b110 ="
1,"
0-"
b110011 '"
b11100 &"
b110 %"
b101 $"
b101 ("
b10100110000111000110011 #
b10100110000111000110011 )
b10100110000111000110011 #"
0"
b10 &
#24
0P"
b10010 (
b10010 @"
b10010 Z
b10010 >
b10010 :#
b11000 '
b11000 >"
b11000 ?
b11000 9#
0O"
0%
b11100 -
b11100 J"
b11100 w"
0D
b101 B
b101 H"
b101 R
b101 F"
b101 a"
b110 Y
b110 D"
b110 `"
1!
1T
1"
#25
0"
#26
0/
0,
0:
07
02
0G
0F
0Q
0X
0M
1O
1V
18
b10 R"
b1 Q"
1"
#27
0"
#28
1*
19
0O
0V
08
1I
b100 R"
b110 =
b110 e
b110 ""
b1 L
b1 f
b1 }
b101010 [
b101010 ["
b110 n
b110 ~
b1 m
b1 {
b10010 i
b10010 u
b10010 z
b101010 S
b101010 ^
b110110000 @
b110110000 M"
b0 A
b0 c
b1 H
b1 b
b11000 l
b11000 o
b11000 t
b10010 P
b10010 \
b10010 _
b10010 h
b10010 v
b10010 x
b10010 G"
b10010 L"
b11000 W
b11000 ]
b11000 `
b11000 k
b11000 p
b11000 r
b11000 E"
b11000 K"
b10 Q"
1"
#29
0"
#30
0N"
0I
1+
b1000 R"
b101010 r"
b101010 .#
b11 Q"
1"
#31
0"
#32
1N"
0*
1P"
09
1/
1,
1:
17
12
1G
1F
1Q
1X
1M
0+
b1 R"
1O"
1%
b0 Q"
0!
0T
1"
#33
b11111 .
b11111 <"
b11111 C"
b0 C
b0 2"
b0 A"
b0 N
b0 ."
b0 ?"
b11100 U
b11100 +"
b11100 ="
b11111 &"
b11100 %"
b0 $"
b0 ("
b11100000111110110011 #
b11100000111110110011 )
b11100000111110110011 #"
0"
b11 &
#34
0P"
b0 (
b0 @"
b0 Z
b0 >
b0 :#
b101010 '
b101010 >"
b101010 ?
b101010 9#
0O"
0%
b11111 -
b11111 J"
b11111 w"
b0 B
b0 H"
b0 R
b0 F"
b0 a"
b11100 Y
b11100 D"
b11100 `"
1!
1T
1"
#35
0"
#36
0/
0,
0:
07
02
0G
0F
0Q
0X
0M
1O
1V
18
b10 R"
b1 Q"
1"
#37
0"
#38
1*
19
0O
0V
08
1I
b100 R"
bx =
bx e
bx ""
bx L
bx f
bx }
bx n
bx ~
bx m
bx {
b0 i
b0 u
b0 z
b0 @
b0 M"
b101010 l
b101010 o
b101010 t
b0 P
b0 \
b0 _
b0 h
b0 v
b0 x
b0 G"
b0 L"
b101010 W
b101010 ]
b101010 `
b101010 k
b101010 p
b101010 r
b101010 E"
b101010 K"
b10 Q"
1"
#39
0"
#40
0N"
0I
1+
b1000 R"
b101010 u"
b101010 2#
b11 Q"
1"
#41
0"
#42
1N"
0*
1P"
09
1/
1,
1:
17
12
1G
1F
1Q
1X
1M
0+
b1 R"
1O"
1%
b0 Q"
0!
0T
1"
#43
b0x00xxxx 1"
bx .
bx <"
bx C"
x6
x4
bx C
bx 2"
bx A"
xE
bx N
bx ."
bx ?"
bx U
bx +"
bx ="
x:"
x7"
x9"
x8"
x5"
x4"
x0"
x/"
x3"
x;"
x,"
x-"
bx '"
bx &"
bx *"
bx %"
bx $"
bx )"
bx ("
bx #
bx )
bx #"
0"
b100 &
